package ssl

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"time"
	"fmt"
	"math/big"
	"crypto/tls"
	"os"

	config "github.com/SolarResearchTeam/dn-sniffer/config"
)


func ReloadCerts() error {
	path := config.Conf.SSL.Path
	entries, err := os.ReadDir(path)
	if os.IsNotExist(err) {
		err = CheckAndCreateSSL()
		if err != nil {
			return err
		}
		entries, err = os.ReadDir(path)
		if err != nil {
			return err
		}
	} else if err != nil {
		return err
	}


	//Load certs
	certs := []tls.Certificate{}

	cert, err := tls.LoadX509KeyPair(path+"/default/cert.pem", path+"/default/key.pem")
    if err != nil && os.IsNotExist(err) {
        err = CheckAndCreateSSL()
        if err != nil {
        	return err
        } else {
        	cert, err = tls.LoadX509KeyPair(path+"/default/cert.pem", path+"/default/key.pem")
        	if err != nil {
        		return err
        	}
        }
    } else if err != nil {
    	return err
    }

    certs = append(certs,cert)

    for _, e := range entries {
    	if e.Name() != "default" && e.IsDir() {
    		cert, err := tls.LoadX509KeyPair(path+"/"+e.Name()+"/cert.pem", path+"/"+e.Name()+"/key.pem")
    		if err == nil {
    			certs = append(certs,cert)
    		} else {
    			return err
    		}
    	}
    }

	GlobalTLSConfig.Certificates = certs
	return nil
}


func CheckAndCreateSSL() error {
	path := config.Conf.SSL.Path
	// Check whether there is an existing SSL certificate and/or key
	_, err := os.Stat(path)
	if os.IsNotExist(err) {
		err = os.MkdirAll(path+"/default", os.ModePerm)
		if err != nil {
			return err
		}
		err = createSelfSigned()
		if err != nil {
			return err
		}
	} else if err != nil {
		return err
	}

	_, err = os.Stat(path+"/default")
	if os.IsNotExist(err) {
		err = os.MkdirAll(path+"/default", os.ModePerm)
		if err != nil {
			return err
		}
		err = createSelfSigned()
		return err
	} else if err != nil {
		return err
	}

	_, err = os.Stat(path+"/default/cert.pem")
	if os.IsNotExist(err) {
		os.Remove(path+"/default/key.pem")
		err = createSelfSigned()
		return err
	} else if err != nil {
		return err
	}

	_, err = os.Stat(path+"/default/key.pem")
	if os.IsNotExist(err) {
		os.Remove(path+"/default/cert.pem")
		err = createSelfSigned()
		return err
	} else if err != nil {
		return err
	}


	return nil
}

func createSelfSigned() error {
	path := config.Conf.SSL.Path + "/default/"
	cp := path + "cert.pem"
	kp := path + "key.pem"

	priv, err := ecdsa.GenerateKey(elliptic.P384(), rand.Reader)
	if err != nil {
		return fmt.Errorf("error generating tls private key: %v", err)
	}

	notBefore := time.Now()
	// Generate a certificate that lasts for 10 years
	notAfter := notBefore.Add(10 * 365 * 24 * time.Hour)

	serialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)
	serialNumber, err := rand.Int(rand.Reader, serialNumberLimit)

	if err != nil {
		return fmt.Errorf("tls certificate generation: failed to generate a random serial number: %s", err)
	}

	template := x509.Certificate{
		SerialNumber: serialNumber,
		Subject: pkix.Name{
			Organization: []string{"GoDNS"},
			CommonName: "autogenerated cert",
		},
		NotBefore: notBefore,
		NotAfter:  notAfter,

		KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},
		BasicConstraintsValid: true,
		//DNSNames: []string{config.Conf.WebServerConf.Hostname},
	}

	derBytes, err := x509.CreateCertificate(rand.Reader, &template, &template, priv.Public(), priv)
	if err != nil {
		return fmt.Errorf("tls certificate generation: failed to create certificate: %s", err)
	}

	certOut, err := os.Create(cp)
	if err != nil {
		return fmt.Errorf("tls certificate generation: failed to open %s for writing: %s", cp, err)
	}
	pem.Encode(certOut, &pem.Block{Type: "CERTIFICATE", Bytes: derBytes})
	certOut.Close()

	keyOut, err := os.OpenFile(kp, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return fmt.Errorf("tls certificate generation: failed to open %s for writing", kp)
	}

	b, err := x509.MarshalECPrivateKey(priv)
	if err != nil {
		return fmt.Errorf("tls certificate generation: unable to marshal ECDSA private key: %v", err)
	}

	pem.Encode(keyOut, &pem.Block{Type: "EC PRIVATE KEY", Bytes: b})
	keyOut.Close()
	return nil
}